version: "3.8"

services:

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - queue_orchestrator
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
      - zookeeper_secrets:/etc/zookeeper/secrets
    healthcheck:
      test: ["CMD", "zookeeper-shell", "localhost:2181", "ls", "/"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    expose:
      - "9092"
      - "9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    networks:
      - queue_orchestrator
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_secrets:/etc/kafka/secrets
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  # Control Center
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    hostname: control-center
    depends_on:
        kafka:
          condition: service_healthy
    ports:
      - "9021:9021"
    expose:
      - "9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      PORT: 9021
    networks:
      - queue_orchestrator
    volumes:
      - control-center_data:/var/lib/confluent-control-center
    healthcheck:
        test: ["CMD", "wget", "-q", "--spider", "http://localhost:9021/"]
        interval: 5s
        timeout: 5s
        retries: 5
    restart: on-failure

  # Redis
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    expose:
      - "6379"
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    networks:
      - queue_orchestrator
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: redis-server

  # Services and Gateway
  gateway-db:
    image: postgres:alpine
    container_name: dbservices
    environment:
      POSTGRES_DB: services
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - '5400:5432'
    expose:
      - "5432"
    networks:
      - queue_orchestrator
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - dbservices_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql", "services", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: gateway
    environment:
      APP_PORT: 2000
    ports:
      - '2000:2000'
    expose:
      - "2000"
    volumes:
      - ./api-gateway/:/app/
    depends_on:
      gateway-db:
        condition: service_healthy
    networks:
      - queue_orchestrator
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:2000/health/"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  # Users
  auth-db:
    image: postgres:alpine
    container_name: dbusers
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - '5402:5432'
    expose:
      - "5432"
    networks:
      - queue_orchestrator
    depends_on:
      gateway:
        condition: service_healthy
    volumes:
      - dbusers_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql", "user", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  auth:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth
    environment:
      APP_PORT: 80
    ports:
      - '2001:80'
    expose:
      - "80"
    volumes:
      - ./auth-service/:/app/
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:80/health/" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - queue_orchestrator
    restart: on-failure
      

  # Automations
  automations-db:
    image: postgres:alpine
    container_name: dbautomations
    environment:
      POSTGRES_DB: automation
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - '5403:5432'
    expose:
      - "5432"
    networks:
      - queue_orchestrator
    depends_on:
      gateway:
        condition: service_healthy
    volumes:
      - dbautomations_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql", "automation", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  automations-service:
    build:
      context: ./automation-service
      dockerfile: Dockerfile
    container_name: automations
    environment:
      APP_PORT: 80
    ports:
      - '2002:80'
    expose:
      - "80"
    volumes:
      - ./automation-service/:/app/
    depends_on:
      automations-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:80/health/" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - queue_orchestrator
    restart: on-failure

  # Logs
  logs-db:
    image: postgres:alpine
    container_name: dblogs
    environment:
      POSTGRES_DB: log
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - '5404:5432'
    expose:
      - "5432"
    networks:
      - queue_orchestrator
    depends_on:
      gateway:
        condition: service_healthy
    volumes:
      - dblogs_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql", "log", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  logs-service:
    build:
      context: ./log-service
      dockerfile: Dockerfile
    container_name: logs
    environment:
      APP_PORT: 80
    ports:
      - '2003:80'
    expose:
      - "80"
    volumes:
      - ./log-service/:/app/
    depends_on:
      logs-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:80/health/" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - queue_orchestrator
    restart: on-failure

  # Notifications
  notifications-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notifications
    environment:
      APP_PORT: 80
    ports:
      - '2004:80'
    expose:
      - "80"
    volumes:
      - ./notification-service/:/app/
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:80/health/" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - queue_orchestrator
    restart: always

# Networks
networks:
  queue_orchestrator:
    external: true

# Volumes
volumes:
  # Zookeeper
  zookeeper_data:
  zookeeper_log:
  zookeeper_secrets:

  # Kafka
  kafka_data:
  kafka_secrets:

  # Control Center
  control-center_data:

  # Redis
  redis_data:

  # Dbs
  dbservices_data:
  dbusers_data:
  dbautomations_data:
  dblogs_data:


