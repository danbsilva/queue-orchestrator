version: "3"

networks:
  micro_network:
    external: true

services:

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - micro_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9094:9094
    expose:
      - "9092"
      - "9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    networks:
      - micro_network

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    expose:
      - "9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      PORT: 9021
    networks:
      - micro_network

  topic-creator:
    image: confluentinc/cp-kafka:latest
    container_name: topic-creator
    depends_on:
      - control-center
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - micro_network
    command: >
      bash -c "
        kafka-topics --create --topic SEND_EMAIL_VALIDATION --partitions 2 --replication-factor 1 --bootstrap-server kafka:9092
      "

  # Redis
  redis:
    image: redis
    container_name: rd_micro
    ports:
      - "6377:6379"
    expose:
      - "6379"
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    networks:
      - micro_network
    restart: always
    command: redis-server

  # Users
  dbusers:
    image: postgres
    container_name: dbusers
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - '5402:5432'
    expose:
      - "5432"
    networks:
      - micro_network
    restart: always

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth
    environment:
      APP_PORT: 2001
    ports:
      - '2001:2001'
    expose:
      - "2001"
    volumes:
      - ./migrations:/app/migrations
      - ./.env:/app/.env
      - ./src:/app/src
      - ./main.py:/app/main.py
    depends_on:
      - dbusers
    networks:
      - micro_network
    restart: always
    #command: >
    #  sh -c "flask db migrate && flask db upgrade && gunicorn -b :80 main:gunicorn_app"
    command: >
          sh -c "python main.py"

